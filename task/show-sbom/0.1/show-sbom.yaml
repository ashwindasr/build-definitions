---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: show-sbom
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
spec:
  description: >-
    Shows the Software Bill of Materials (SBOM) generated for the built image in CyloneDX JSON format.
  params:
    - name: IMAGE_URL
      description: Fully qualified image name to show SBOM for.
      type: string
  steps:
  - name: show-sbom
    image: quay.io/redhat-appstudio/cosign:v2.1.1@sha256:c883d6f8d39148f2cea71bff4622d196d89df3e510f36c140c097b932f0dd5d5
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    # also per direction from Ralph Bean, we want to use image digest based tags to use a cue to automation like dependabot or renovatebot to periodially submit pull requests that update the digest as new images are released.
    env:
    - name: IMAGE_URL
      value: $(params.IMAGE_URL)
    script: |
      #!/busybox/sh
      status=-1
      max_try=5
      wait_sec=2
      for run in $(seq 1 $max_try); do
        status=0

        mediatype=$(skopeo inspect --raw docker://$IMAGE_URL | jq -r .mediaType)
        echo "Image is of mediatype ${mediatype}"

        if [ "${mediatype}" -eq "application/vnd.oci.image.index.v1+json" ] ; then
          platforms=$(
            skopeo inspect --raw docker://$IMAGE_URL |
            jq '.manifests[].platform' |
            jq -r '(.os + "/" + .architecture)'
          )
          status=$?
          for platform in $platforms; do
            echo "Inspecting sbom ${platform}"
            cosign download sbom --platform $platform $IMAGE_URL 2>>err
            status=$?
          done
        elif [ "${mediatype}" -eq "application/vnd.oci.image.manifest.v1+json" ] ; then
          cosign download sbom $IMAGE_URL 2>>err
          status=$?
        else
          echo "Mediatype ${mediatype} is not supported."
          status=1
        fi

        if [ "$status" -eq 0 ]; then
          break
        fi
        sleep $wait_sec
      done
      if [ "$status" -ne 0 ]; then
          echo "Failed to get SBOM after ${max_try} tries" >&2
          cat err >&2
      fi
